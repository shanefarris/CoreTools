namespace Sound 
{
	class CMemberFunctionSlot;
	/**
	 * CSound.
	 * @remarks
	 * Sounds are created using the CSoundManager::CreateSound method
	 * and then can be attached to Ogre::SceneNodes, placed at a point
	 * in space or placed at an offset relative to the listener.
	 *
	 * @see Ogre::MovableObject
	 */
	class  CSound : public Ogre::MovableObject
	{
	public:
		 ~CSound();
		enum Priority
		{
			LOW,
			NORMAL,
			HIGH
		};
		// Plays the sound. 
		bool Play();
		// Sound Events
		void (*SoundEvent_OnPlay)(Sound::CSound* Sound);			// Every time it is played
		void (*SoundEvent_OnPlayOnce)(Sound::CSound* Sound);		// Only the first time it is played
		void (*SoundEvent_OnPause)(Sound::CSound* Sound);			// Put on pause
		void (*SoundEvent_OnStop)(Sound::CSound* Sound);			// When it is done
		// Returns true if the sound is playing, otherwise false. 
		 bool IsPlaying() const;
		// Pauses the sound. @note Upon calling play again, the sound will resume where it left off 
		 bool Pause();
		// Returns true if the sound is paused, otherwise false. 
		 bool IsPaused() const;
		// Stops the sound. @note Upon calling play again, the sound will resume from the begining 
		bool Stop();
		// Returns true if the sound is stopped, otherwise false.
		 bool IsStopped() const;
		// Returns true if the source does not have a state yet, otherwise false 
		 bool IsInitial() const;
		// Starts playing the song while fading in.
		bool FadeIn(float fadeTime);
		// Fades out, but keeps playing at volume 0, so it can be faded in again.
		bool FadeOut(float fadeTime);
		// Sets the pitch multiplier. Note pitch must always be positive non-zero, all other values will be ignored
		void SetPitch(float pitch);
		// Returns the pitch multiplier. 
		float GetPitch() const { return m_Pitch; }
		/** 
		 * Sets the gain. 
		 * @param gain The gain where 1.0 is full volume and 0.0 is off
		 * @note Negative values will be ignored
		 */
		void SetGain(float gain);
		/** Returns the gain. */
		float GetGain() const { return m_Gain; }
		/** 
		 * Sets the max gain. 
		 * @param maxGain The maximum amount of gain allowed for this source
		 * @note Valid range is [0.0 - 1.0] all other values will be ignored
		 */
		void SetMaxGain(float maxGain);
		/** Returns the max gain. */
		float GetMaxGain() const { return m_MaxGain; }
		/** 
		 * Sets the min gain. 
		 * @param minGain The minimum amount of gain allowed for this source.
		 * @note Valid range is [0.0 - 1.0] all other values will be ignored
		 */
		void SetMinGain(float minGain);
		/** Returns the gain. */
		float GetMinGain() const { return m_MinGain; }
		/**
		 * Set the min max and current gain.
		 * @param maxGain The maximum amount of gain allowed for this source
		 * @param minGain The minimum amount of gain allowed for this source
		 * @param gain The current gain for this source
		 * @note Gain should be positive
		 */
		void SetGainValues(float maxGain, float minGain, float gain);
		/**
		 * Sets the Max Distance.
		 * @param maxDistance The max distance used in the Inverse Clamped Distance Model
		 * @note This is the distance where there will be no further attenuation of the source
		 * @note Negative values will be ignored
		 */
		void SetMaxDistance(float maxDistance);
		/** Returns the max distance */
		float GetMaxDistance() const { return m_MaxDistance; }
		/**
		 * Sets the rolloff factor.
		 * @param rolloffFactor The rolloff rate for the source 
		 * @note Used for distance attenuation
		 * @note Negative values will be ignored
		 */
		void SetRolloffFactor(float rolloffFactor);
		/** Returns the rolloff factor */
		float GetRolloffFactor() const {return m_RolloffFactor;}
		/**
		 * Sets the reference distance.
		 * @param refDistance The reference distance used in attenuation calculations.
		 * @note This is the distance under which the volume for the
		 *     source would normally drop by half
		 * @note Negative values will be ignored
		 */
		void SetReferenceDistance(float refDistance);
		/** Returns the reference distance. */
		float GetReferenceDistance() const {return m_ReferenceDistance; }
		/**
		 * Sets the variables used in the distance attenuation calculation.
		 * @param maxDistance The max distance used in the Inverse Clamped Distance Model
		 * @param rolloffFactor The rolloff rate for the source
		 * @param refDistance The reference distance used in attenuation calculations
		 */
		void SetDistanceValues(float maxDistance, float rolloffFactor, float refDistance);
		/**
		 * Sets the velocity of the sound.
		 * @param x The x part of the velocity vector
		 * @param y The y part of the velocity vector
		 * @param z The z part of the velocity vector
		 */
		void SetVelocity(float x, float y, float z);
		/** Sets the velocity of the sound. @param vec The velocity vector */
		void SetVelocity(const reVector3Df& vec);
		/** Returns the velocity of the sound. */
		const reVector3Df& GetVelocity() const {return m_Velocity;}
		/** 
		 * Sets the source relation to the listner.
		 * @param relative Whether the sound position is
		 *    relative to the listener or not.
		 * @note If this is Set to true then the position of the
		 * sound will be relative to the listener.  However,
		 * Setting this to true will have no effect if the sound
		 * is connected to a scene node.
		 */
		void SetRelativeToListener(bool relative);
		/** Returns true if the sound is relative to the listener, otherwise false. */
		bool IsRelativeToListener() const { return m_SourceRelative == AL_TRUE ? true : false; }
		/**
		 * Sets the position of the sound.
		 * @param x The x part of the position
		 * @param y The y part of the position
		 * @param z The z part of the position
		 * @note In the case that this sound is attached to a SceneNode this
		 *     position become the offset from the parent scene node
		 */
		void SetPosition(float x, float y, float z);
		/**
		 * Sets the position of the sound.
		 * @param vec The new postion for the sound.
		 * @note In the case that this sound is attached to a SceneNode this
		 *     position become the offset from the parent scene node
		 */
		void SetPosition(const reVector3Df& vec);
		/** Returns the position of the sound. */
		const reVector3Df& GetPosition() const { return m_Position; }
		/**
		 * Sets the direction of the sound.
		 * @param x The x part of the direction vector
		 * @param y The y part of the direction vector
		 * @param z The z part of the direction vector
		 * @note In the case that this sound is attached to a SceneNode this
		 *     directions becomes relative to the parent's direction
		 */
		void SetDirection(float x, float y, float z);
		/**
		 * Sets the direction of the sound.
		 * @param vec The direction vector.
		 * @note In the case that this sound is attached to a SceneNode this
		 *     directions becomes relative to the parent's direction
		 */
		void SetDirection(const reVector3Df& vec);
		/** Returns the direction of the sound. */
		const reVector3Df& GetDirection() const { return m_Direction; }
		/**
		 * Sets the gain outside the sound cone of a directional sound.
		 * @param outerConeGain The gain outside the directional cone
		 * @note Each directional source has three zones:<ol><li>The inner zone as defined by the 
		 *     <i>setInnerConeAngle</i> where the gain is constant and is Set by <i>SetGain</i></li>
		 *     <li>The outer zone which is Set by <i>setOuterConeAngle</i> and the gain is a linear 
		 *     transition between the gain and the outerConeGain</li><li>Outside of the sound cone.  
		 *     The gain in this zone is Set by <i>setOuterConeGain</i></li></ol>
		 * @note Valid range is [0.0 - 1.0] all other values will be ignored
		 */
		void SetOuterConeGain(float outerConeGain);
		/** Returns the outerConeGain */
		float GetOuterConeGain() const { return m_OuterConeGain; }
		/**
		 * Sets the inner angle of the sound cone for a directional sound.
		 * @param innerConeAngle The angle that defines the inner cone of a directional sound.  Valid values are [0 - 360]
		 * @note Each directional source has three zones:<ol><li>The inner zone as defined by the 
		 *     <i>setInnerConeAngle</i> where the gain is constant and is Set by <i>SetGain</i></li>
		 *     <li>The outer zone which is Set by <i>setOuterConeAngle</i> and the gain is a linear 
		 *     transition between the gain and the outerConeGain</li><li>Outside of the sound cone.  
		 *     The gain in this zone is Set by <i>setOuterConeGain</i></li></ol>
		 */
		void SetInnerConeAngle(float innerConeAngle);
		/** Return the innerConeAngle */
		float GetInnerConeAngle() const { return m_InnerConeAngle; }
		/**
		 * Sets the outer angle of the sound cone for a directional sound.
		 * @param outerConeAngle The angle that defines the outer cone of a directional sound.  Valid values are [0 - 360]
		 * @note Each directional source has three zones:<ol><li>The inner zone as defined by the 
		 *     <i>setInnerConeAngle</i> where the gain is constant and is Set by <i>SetGain</i></li>
		 *     <li>The outer zone which is Set by <i>setOuterConeAngle</i> and the gain is a linear 
		 *     transition between the gain and the outerConeGain</li><li>Outside of the sound cone.  
		 *     The gain in this zone is Set by <i>setOuterConeGain</i></li></ol>
		 */
		void SetOuterConeAngle(float outerConeAngle);
		/** Returns the outerConeAngle */
		float GetOuterConeAngle() { return m_OuterConeAngle; } 
		/** Sets the looping state */
		 void SetLoop(bool loop);
		/** Returns looping state */
		bool IsLooping() const { return m_Loop == AL_TRUE ? true : false; }
		/** Returns streaming state */
		bool IsStreaming() const { return m_Stream == AL_TRUE ? true : false; }
		/** Sets the priority of the sound */
		void SetPriority(Priority priority) { m_Priority = priority; }
		/** Returns the current Priority for the sound */
		Priority GetPriority() const { return m_Priority; }
		/** Returns the duration of the audio in seconds */
		float GetSecondDuration() {return m_LengthInSeconds;}
		/** Sets the offset within the audio stream in seconds. @note Negative values will be ignored */
		 void SetSecondOffset(float seconds);
		/** Returns the current offset within the audio stream in seconds */
		 float GetSecondOffset();
		/** Returns the position of the sound including any transform from nodes it is attached to. */
		const reVector3Df& GetDerivedPosition() const { return m_DerivedPosition; }
		/** Returns the direction of the sound including any transform from nodes it is attached to. */
		const reVector3Df& GetDerivedDirection() const { return m_DerivedDirection; }
		/** Returns the name of the file used to create this CSound. */
		const String& GetFileName() const { return m_FileName; }
		/** Sets a callback to alert the user when the CSound has stopped playing */
		template<typename T> void addSoundFinishedHandler(T *object, void(T::*function)(CSound *sound))
		{
			m_FinishedCallback = new CMemberFunctionPointer<T>(function, object);
		}
		template<typename T> void addSoundLoopedHandler(T *object, void(T::*function)(CSound *sound))
		{
			m_LoopedCallback = new CMemberFunctionPointer<T>(function, object);
		}
		/** Overridden from MovableObject */
		const String& getMovableType() const;
		/** Overridden from MovableObject */
		const Ogre::AxisAlignedBox& getBoundingBox() const;
		/** Overridden from MovableObject */
		float getBoundingRadius() const {return 0; /* Not Visible */} 
		/** Overridden from MovableObject */
		void _updateRenderQueue(Ogre::RenderQueue* queue);
		/** Notifies the sound when it is attached to a node */
		void _notifyAttached(Ogre::Node *parent, bool isTagPoint = false);
		/** Overridden from MovableObject */
		 void visitRenderables(Ogre::Renderable::Visitor* visitor, bool debugRenderables = false){}
};
} 
namespace Sound 
{
	class CListener;
	class ListenerFactory;
	/*
	 * CFormatData.
	 * @remark This is a storage class to hold data about different
	 * OpenAL buffer formats.
	 */
	class CFormatData
	{
	public:
		CFormatData(BufferFormat alEnum, ALString alChar, const String& description)
		{
			formatEnum = alEnum;
			formatName = alChar;
			formatDescription = description;
		}
		// OpenAL buffer type
		BufferFormat formatEnum;
		// OpenAL buffer type name
		ALString formatName;
		// Buffer type description
		String formatDescription;
	};
	/*
	 * CSoundManager.
	 * @remark This class is responsible for creating and managing all of the
	 *     sounds and listeners used in the application.  Sounds  and Listeners
	 *	   should only ever be created using the creation methods provided in this class
	 */
	class  CSoundManager : public Ogre::FrameListener
	{
	public:
		static CSoundManager* Instance();
		~CSoundManager();
		/*
		 * Creates a sound.  This is the only way sounds should be instantiated
		 * @param name The name used to refer to the sound
		 * @param fileName The name of the sound file to load
		 * @param loop Should the sound be looped once it has finished playing
		 * @param stream Should the sound be streamed or should the whole file be loaded into memory at once
		 * @return Returns a pointer to the newly created sound
		 */
		CSound* CreateSound(const String& fileName, bool loop = false, bool stream = false);
		CSound* CreateSound(const String& name, const String& fileName, bool loop = false, bool stream = false);
		CSound* GetSound(const char* Name) const;		// Returns the requested sound object. @param name The name of the sound to return 
		bool HasSound(const char* Name) const;			// Returns true if the specified sound is loaded in the CSoundManager. @param name The name of the sound to check for
		void DestroySound(const char* Name);			// Destroys the specified sound. @param name The name of the sound to destroy 
		void DestroySound(CSound* sound);				// Destroys the specified sound. @param sound A pointer to the sound to destroy 
		void DestroyAllSounds();						// Destroys all sounds loaded in the CSoundManager 
		void PauseAllSounds();							// Pauses all sounds that are currently playing. 
		void ResumeAllSounds();							// Resumes all sounds that were paused with the previous call to PauseAllSounds().
		CListener* GetListener() const;					// This is how you should Get a pointer to the listener object.
		/*
		 * Sets the Doppler factor.
		 * The Doppler factor is a simple scaling factor of the source and listener
		 * velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting
		 * from the Doppler Effect Calculations.
		 * @note Negative values will be ignored.
		 */
		void SetDopplerFactor(float dopplerFactor);
		float GetDopplerFactor() const { return m_DopplerFactor; }		// Returns the Doppler factor
		/* 
		 * Sets the speed of sound used in the Doppler calculations.
		 * This Sets the propagation speed used in the Doppler calculations.
		 * The default is 343.3 m/s (Speed of sound through air), but the
		 * units can be assigned to anything that you want as long as the
		 * velocities of the Sounds and CListener are expressed in the same units.
		 * @note Negative values will be ignored.
		 */
		void	SetSpeedOfSound(float speedOfSound);
		float		GetSpeedOfSound() const { return m_SpeedOfSound; }			// Returns the speed of sound 
		int		MaxSources() const { return m_MaxNumSources; }				// Returns the maximum number of sources allowed by the hardware
		int		EaxSupport() const { return m_EAXVersion; }					// Returns the version of EAX that is supported
		bool	XRamSupport() const { return m_XRAMSupport; }				// Returns true if X-Ram is supported, otherwise false 
		void	_RemoveBufferRef(const String& bufferName);					// Removes a BufferRef from the BufferMap
		void	_AddBufferRef(const String& bufferName, BufferRef buffer);	// Adds a BufferRef to the BufferMap to be used later
		float		_GetLastDeltaTime() const { return m_LastDeltaTime; }		// Used by the fading: returns the time since last frame
		void	LoadAllSounds(const char* ResourceName);					// Load all sounds in the resource manager
		void	GetDeviceList(Vector<String>& list);						// Returns a list of all posible sound devices on the system
		void	GetSoundList(Vector<String>& list);							// Returns a list of all sounds loaded
		// Used to see if our threaded load method is done
		void	SetIsBaseSoundsLoaded(bool isLoaded) { m_IsBaseSoundsLoaded = isLoaded; }
		bool	GetIsBaseSoundsLoaded() { return m_IsBaseSoundsLoaded; }
		void	SetIsBaseSoundsLoading(bool isLoading) { m_IsBaseSoundsLoading = isLoading; }
		bool	GetIsBaseSoundsLoading() { return m_IsBaseSoundsLoading; }
		SourceRef	_RequestSource(CSound *sound);							// Requests a dynamically allocated Source
		SourceRef	_ReleaseSource(CSound *sound);							// Releases a dynamically allocated Source
		ALboolean	EaxSetBufferMode(Size numBuffers, BufferRef *buffers, EAXMode bufferMode);// Sets the mode to be used by sound buffers if X-Ram is supported
		ALenum		EaxGetBufferMode(BufferRef buffer, ALint *reserved = 0);// Returns the eaxBufferMode if X-Ram is supported
		FormatMapIterator GetSupportedFormatIterator();						// Returns an iterator for the list of supported buffer formats 
		const CFormatData* RetrieveFormatData(AudioFormat format) const;	// Contains information for the specified buffer format or nullptr if the specified format is not found
		static const String FILE_TYPE;
		static const String OGG;
		static const String WAV;
		static const String SOUND_FILE;
		static const String LOOP_STATE;
		static const String STREAM;
		static const String AUDIO_FORMAT;
		static const BufferFormat xRamAuto;
		static const BufferFormat xRamHardware;
		static const BufferFormat xRamAccessible;
};
} // Namespace
